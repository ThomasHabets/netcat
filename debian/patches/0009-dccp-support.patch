From: Aron Xu <aron@debian.org>
Date: Mon, 13 Feb 2012 15:56:51 +0800
Subject: [PATCH] dccp support

---
 netcat.c |   82 ++++++++++++++++++++++++++++++++++++++++++++++++++++----------
 1 files changed, 69 insertions(+), 13 deletions(-)

--- a/netcat.c
+++ b/netcat.c
@@ -118,6 +118,7 @@
 char   *sflag;					/* Source Address */
 int	tflag;					/* Telnet Emulation */
 int	uflag;					/* UDP - Default to TCP */
+int	dccpflag;				/* DCCP - Default to TCP */
 int	vflag;					/* Verbosity */
 int	xflag;					/* Socks proxy */
 int	zflag;					/* Port Scan Flag */
@@ -149,6 +150,7 @@
 void	set_common_sockopts(int);
 int	map_tos(char *, int *);
 void	usage(int);
+char    *proto_name(int uflag, int dccpflag);
 
 static int connect_with_timeout(int fd, const struct sockaddr *sa,
         socklen_t salen, int ctimeout);
@@ -176,7 +178,7 @@
 	sv = NULL;
 
 	while ((ch = getopt(argc, argv,
-	    "46DdhI:i:jklnO:P:p:q:rSs:tT:UuV:vw:X:x:z")) != -1) {
+	    "46DdhI:i:jklnO:P:p:q:rSs:tT:UuVZ:vw:X:x:zC")) != -1) {
 		switch (ch) {
 		case '4':
 			family = AF_INET;
@@ -245,6 +247,9 @@
 		case 'u':
 			uflag = 1;
 			break;
+		case 'Z':
+			dccpflag = 1;
+			break;
 # if defined(RT_TABLEID_MAX)
 		case 'V':
 			rtableid = (unsigned int)strtonum(optarg, 0,
@@ -314,6 +319,10 @@
 
 	/* Cruft to make sure options are clean, and used properly. */
 	if (argv[0] && !argv[1] && family == AF_UNIX) {
+ 		if (uflag)
+ 			errx(1, "cannot use -u and -U");
+		if (dccpflag)
+			errx(1, "cannot use -Z and -U");
 		host = argv[0];
 		uport = NULL;
 	} else if (argv[0] && !argv[1]) {
@@ -353,8 +362,18 @@
 	if (family != AF_UNIX) {
 		memset(&hints, 0, sizeof(struct addrinfo));
 		hints.ai_family = family;
-		hints.ai_socktype = uflag ? SOCK_DGRAM : SOCK_STREAM;
-		hints.ai_protocol = uflag ? IPPROTO_UDP : IPPROTO_TCP;
+		if (uflag) {
+		    hints.ai_socktype = SOCK_DGRAM;
+		    hints.ai_protocol = IPPROTO_UDP;
+		}
+		else if (dccpflag) {
+		    hints.ai_socktype = SOCK_DCCP;
+		    hints.ai_protocol = IPPROTO_DCCP;
+		}
+		else {
+		    hints.ai_socktype = SOCK_STREAM;
+		    hints.ai_protocol = IPPROTO_TCP;
+		}
 		if (nflag)
 			hints.ai_flags |= AI_NUMERICHOST;
 	}
@@ -363,6 +382,9 @@
 		if (uflag)
 			errx(1, "no proxy support for UDP mode");
 
+		if (dccpflag)
+			errx(1, "no proxy support for DCCP mode");
+
 		if (lflag)
 			errx(1, "no proxy support for listen");
 
@@ -430,18 +452,19 @@
 				connfd = accept(s, (struct sockaddr *)&cliaddr,
 				    &len);
 				if(vflag) {
+					char *proto = proto_name(uflag, dccpflag);
 				/* Don't look up port if -n. */
 					if (nflag)
 						sv = NULL;
 					else
 						sv = getservbyport(ntohs(atoi(uport)),
-							uflag ? "udp" : "tcp");
+							proto);
 
 					char buf[150];
 					fprintf(stderr, "Connection from %s port %s [%s/%s] accepted\n",
 						inet_ntop(family,&((struct sockaddr_in *)(&cliaddr))->sin_addr,buf,150),
 						uport,
-						uflag ? "udp" : "tcp",
+						proto,
 						sv ? sv->s_name : "*");
 				}
 				readwrite(connfd);
@@ -614,6 +637,22 @@
 	return (s);
 }
 
+char *proto_name(uflag, dccpflag) {
+
+    char *proto = NULL;
+    if (uflag) {
+	proto = "udp";
+    }
+    else if (dccpflag) {
+	proto = "dccp";
+    }
+    else {
+	proto = "tcp";
+    }
+
+    return proto;
+}
+
 /*
  * remote_connect()
  * Returns a socket connected to a remote host. Properly binds to a local
@@ -652,8 +691,19 @@
 # endif
 			memset(&ahints, 0, sizeof(struct addrinfo));
 			ahints.ai_family = res0->ai_family;
-			ahints.ai_socktype = uflag ? SOCK_DGRAM : SOCK_STREAM;
-			ahints.ai_protocol = uflag ? IPPROTO_UDP : IPPROTO_TCP;
+			if (uflag) {
+			    ahints.ai_socktype = SOCK_DGRAM;
+			    ahints.ai_protocol = IPPROTO_UDP;
+
+			}
+			else if (dccpflag) {
+			    ahints.ai_socktype = SOCK_DCCP;
+			    ahints.ai_protocol = IPPROTO_DCCP;
+			}
+			else {
+		    	    ahints.ai_socktype = SOCK_STREAM;
+			    ahints.ai_protocol = IPPROTO_TCP;
+			}
 			ahints.ai_flags = AI_PASSIVE;
 			if ((error = getaddrinfo(sflag, pflag, &ahints, &ares)))
 				errx(1, "getaddrinfo: %s", gai_strerror(error));
@@ -665,15 +715,19 @@
 		}
 
 		set_common_sockopts(s);
+		char *proto = proto_name(uflag, dccpflag);
 
-                if ((error = connect_with_timeout(s, res0->ai_addr, res0->ai_addrlen, timeout))== CONNECTION_SUCCESS)
+                if ((error = connect_with_timeout(s, res0->ai_addr, res0->ai_addrlen, timeout))== CONNECTION_SUCCESS) {
 			break;
-		else if (vflag && error == CONNECTION_FAILED)
+		}
+		else if (vflag && error == CONNECTION_FAILED) {
 			warn("connect to %s port %s (%s) failed", host, port,
-			    uflag ? "udp" : "tcp");
-                else if (vflag && error == CONNECTION_TIMEOUT)
+			     proto);
+		}
+                else if (vflag && error == CONNECTION_TIMEOUT) {
                     warn("connect to %s port %s (%s) timed out", host, port,
-                            uflag ? "udp" : "tcp");
+                             proto);
+		}
 
 		close(s);
 		s = -1;
@@ -981,7 +1035,8 @@
 	int hi, lo, cp;
 	int x = 0;
 
-        sv = getservbyname(p, uflag ? "udp" : "tcp");
+	char *proto = proto_name(uflag, dccpflag);
+	sv = getservbyname(p, proto);
         if (sv) {
                 portlist[0] = calloc(1, PORT_MAX_LEN);
                 if (portlist[0] == NULL)
@@ -1175,6 +1230,7 @@
 	\t-t		Answer TELNET negotiation\n\
 	\t-U		Use UNIX domain socket\n\
 	\t-u		UDP mode\n\
+	\t-Z		DCCP mode\n\
 	\t-V rtable	Specify alternate routing table\n\
 	\t-v		Verbose\n\
 	\t-w secs\t	Timeout for connects and final net reads\n\
