From: Thomas Habets <habets@google.com>
Date: Sat, 18 Feb 2017 21:07:22 +0000
Subject: Set TCP MD5SIG correctly for client connections

---
 netcat.c | 25 +++++++++++++++++++------
 1 file changed, 19 insertions(+), 6 deletions(-)

diff --git a/netcat.c b/netcat.c
index 76117c6..c8d1023 100644
--- a/netcat.c
+++ b/netcat.c
@@ -42,6 +42,7 @@
 #include <netinet/ip.h>
 #include <arpa/telnet.h>
 #include <arpa/inet.h>
+#include <bsd/readpassphrase.h>
 
 #ifndef IPTOS_LOWDELAY
 # define IPTOS_LOWDELAY 0x10
@@ -149,6 +150,7 @@ int	Sflag;					/* TCP MD5 signature option */
 int	Tflag = -1;				/* IP Type of Service */
 int	rtableid = -1;
 
+char Sflag_password[TCP_MD5SIG_MAXKEYLEN];
 int timeout = -1;
 int family = AF_UNSPEC;
 char *portlist[PORT_MAX+1];
@@ -168,7 +170,7 @@ int	udptest(int);
 int	unix_bind(char *);
 int	unix_connect(char *);
 int	unix_listen(char *);
-void	set_common_sockopts(int, int);
+void    set_common_sockopts(int, const struct sockaddr *);
 int	map_tos(char *, int *);
 void	report_connect(const struct sockaddr *, socklen_t);
 void	usage(int);
@@ -338,6 +340,10 @@ main(int argc, char *argv[])
 			break;
 		case 'S':
 # if defined(TCP_MD5SIG)
+                        if (readpassphrase("TCP MD5SIG password: ",
+                                           Sflag_password, TCP_MD5SIG_MAXKEYLEN, RPP_REQUIRE_TTY) == NULL) {
+                                errx(1, "Unable to read TCP MD5SIG password");
+                        }
 			Sflag = 1;
 # else
 			errx(1, "no TCP MD5 signature support available");
@@ -799,7 +805,7 @@ remote_connect(const char *host, const char *port, struct addrinfo hints)
 			freeaddrinfo(ares);
 		}
 
-		set_common_sockopts(s, res0->ai_family);
+		set_common_sockopts(s, res0->ai_addr);
 		char *proto = proto_name(uflag, dccpflag);
 
                 if ((error = connect_with_timeout(s, res0->ai_addr, res0->ai_addrlen, timeout))== CONNECTION_SUCCESS) {
@@ -970,7 +976,7 @@ local_listen(char *host, char *port, struct addrinfo hints)
 			err(1, NULL);
 # endif
 
-		set_common_sockopts(s, res0->ai_family);
+		set_common_sockopts(s, res0->ai_addr);
 
 		if (bind(s, (struct sockaddr *)res0->ai_addr,
 		    res0->ai_addrlen) == 0)
@@ -1426,7 +1432,7 @@ udptest(int s)
 }
 
 void
-set_common_sockopts(int s, int af)
+set_common_sockopts(int s, const struct sockaddr* sa)
 {
 	int x = 1;
 
@@ -1441,8 +1447,15 @@ set_common_sockopts(int s, int af)
 # endif
 # if defined(TCP_MD5SIG)
 	if (Sflag) {
+		struct tcp_md5sig sig;
+		memset(&sig, 0, sizeof(sig));
+		memcpy(&sig.tcpm_addr, sa, sizeof(struct sockaddr_storage));
+		sig.tcpm_keylen = TCP_MD5SIG_MAXKEYLEN < strlen(Sflag_password)
+			? TCP_MD5SIG_MAXKEYLEN
+			: strlen(Sflag_password);
+		strlcpy(sig.tcpm_key, Sflag_password, sig.tcpm_keylen);
 		if (setsockopt(s, IPPROTO_TCP, TCP_MD5SIG,
-			&x, sizeof(x)) == -1)
+			&sig, sizeof(sig)) == -1)
 			err(1, NULL);
 	}
 # endif
@@ -1454,7 +1467,7 @@ set_common_sockopts(int s, int af)
 	if (Tflag != -1) {
 		int proto, option;
 
-		if (af == AF_INET6) {
+		if (sa->sa_family == AF_INET6) {
 			proto = IPPROTO_IPV6;
 			option = IPV6_TCLASS;
 		} else {
